"use client";

import { useEffect, useState } from 'react';
import { useSession, signOut } from 'next-auth/react';
import { motion, AnimatePresence } from 'framer-motion';

function sanitizeKey(v) {
  if (!v) return '';
  let s = String(v).trim();
  if ((s.startsWith('"') && s.endsWith('"')) || (s.startsWith("'") && s.endsWith("'"))) s = s.slice(1, -1).trim();
  return s;
}

// Toast notification component
function Toast({ message, type = 'success', onClose }) {
  useEffect(() => {
    const timer = setTimeout(onClose, 4000);
    return () => clearTimeout(timer);
  }, [onClose]);

  return (
    <motion.div
      initial={{ opacity: 0, y: -50, scale: 0.9 }}
      animate={{ opacity: 1, y: 0, scale: 1 }}
      exit={{ opacity: 0, y: -20, scale: 0.9 }}
      className={`fixed top-4 right-4 z-50 px-6 py-3 rounded-xl shadow-2xl backdrop-blur-md border ${
        type === 'error' 
          ? 'bg-red-500/90 border-red-400/30 text-white' 
          : type === 'warning'
          ? 'bg-amber-500/90 border-amber-400/30 text-white'
          : 'bg-emerald-500/90 border-emerald-400/30 text-white'
      }`}
    >
      <div className="flex items-center gap-2">
        {type === 'error' ? '❌' : type === 'warning' ? '⚠️' : '✅'}
        <span className="font-medium">{message}</span>
        <button onClick={onClose} className="ml-2 hover:opacity-70">×</button>
      </div>
    </motion.div>
  );
}

// Form field component
function FormField({ label, children, error, required = false }) {
  return (
    <div className="space-y-2">
      <label className="block text-sm font-medium text-slate-200">
        {label} {required && <span className="text-red-400">*</span>}
      </label>
      {children}
      {error && <p className="text-red-400 text-sm">{error}</p>}
    </div>
  );
}

// Loading spinner
function LoadingSpinner({ size = 'md' }) {
  const sizeClass = size === 'sm' ? 'w-4 h-4' : size === 'lg' ? 'w-8 h-8' : 'w-6 h-6';
  return (
    <div className={`${sizeClass} animate-spin rounded-full border-2 border-slate-300 border-t-purple-500`} />
  );
}

export default function AdminApp({ initialCounts = {} }) {
  const { data: session } = useSession();
  const [adminKey, setAdminKey] = useState('');
  const [tab, setTab] = useState('overview');
  const [products, setProducts] = useState([]);
  const [editing, setEditing] = useState(null);
  const [editingCategory, setEditingCategory] = useState(null);
  const [categories, setCategories] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [newAffiliateLinks, setNewAffiliateLinks] = useState([]);
  const [newBenchmarks, setNewBenchmarks] = useState([]);
  const [editAffiliateLinks, setEditAffiliateLinks] = useState([]);
  const [editBenchmarks, setEditBenchmarks] = useState([]);
  const [toast, setToast] = useState(null);
  const [searchQuery, setSearchQuery] = useState('');

  useEffect(() => {
    try {
      const saved = localStorage.getItem('adminKey');
      if (saved) setAdminKey(saved);
    } catch (e) {}
  }, []);

  useEffect(() => {
    try {
      if (adminKey) localStorage.setItem('adminKey', sanitizeKey(adminKey));
      else localStorage.removeItem('adminKey');
    } catch (e) {}
  }, [adminKey]);

  const showToast = (message, type = 'success') => {
    setToast({ message, type });
  };

  async function fetchLists() {
    setLoading(true);
    setError('');
    try {
      const [pRes, cRes] = await Promise.all([fetch('/api/products'), fetch('/api/categories')]);
      const pJson = await pRes.json();
      const cJson = await cRes.json();
      setProducts(pJson.products || []);
      setCategories(cJson.categories || []);
      showToast('Data refreshed successfully');
    } catch (err) {
      const errorMsg = String(err);
      setError(errorMsg);
      showToast(errorMsg, 'error');
    } finally {
      setLoading(false);
    }
  }

  useEffect(() => { fetchLists(); }, []);

  // seed functionality removed

  async function createCategory(e) {
    e.preventDefault();
    setLoading(true);
    const key = sanitizeKey(adminKey);
    const body = {
      name: e.target.name.value,
      slug: e.target.slug.value,
      description: e.target.description.value || '',
      icon: e.target.icon.value || ''
    };
    
    try {
      const res = await fetch('/api/categories', { 
        method: 'POST', 
        headers: { 'Content-Type': 'application/json', 'x-admin-key': key }, 
        body: JSON.stringify(body) 
      });
      const j = await res.json();
      
      if (!res.ok) {
        showToast(j.error || 'Failed to create category', 'error');
      } else {
        e.target.reset();
        showToast('Category created successfully');
        fetchLists();
      }
    } catch (err) {
      showToast('Network error: ' + String(err), 'error');
    } finally {
      setLoading(false);
    }
  }

  async function createProduct(e) {
    e.preventDefault();
    setLoading(true);
    const key = sanitizeKey(adminKey);
    
    // Validation
    if (!e.target.name.value.trim()) {
      showToast('Product name is required', 'error');
      setLoading(false);
      return;
    }
    
    // parse optional fields
    let images = [];
    if (e.target.images && e.target.images.value) {
      images = e.target.images.value.split(',').map(s => s.trim()).filter(Boolean);
    }
    
    // use controlled arrays if present
    let affiliateLinks = Array.isArray(newAffiliateLinks) ? newAffiliateLinks : [];
    let benchmarks = Array.isArray(newBenchmarks) ? newBenchmarks : [];

    const body = {
      name: e.target.name.value,
      slug: e.target.slug.value,
      images,
      image: images.length > 0 ? images[0] : (e.target.image?.value || ''),
      description: e.target.description.value || '',
      category: e.target.category.value || '',
      affiliateLinks,
      benchmarks,
    };
    
    try {
      const res = await fetch('/api/products', { 
        method: 'POST', 
        headers: { 'Content-Type': 'application/json', 'x-admin-key': key }, 
        body: JSON.stringify(body) 
      });
      const j = await res.json();
      
      if (!res.ok) {
        showToast(j.error || 'Failed to create product', 'error');
      } else {
        e.target.reset();
        setNewAffiliateLinks([]);
        setNewBenchmarks([]);
        showToast('Product created successfully');
        fetchLists();
      }
    } catch (err) {
      showToast('Network error: ' + String(err), 'error');
    } finally {
      setLoading(false);
    }
  }

  async function deleteProduct(slug) {
    if (!confirm('Delete product ' + slug + '?')) return;
    const key = sanitizeKey(adminKey);
    const res = await fetch('/api/products/' + encodeURIComponent(slug), { method: 'DELETE', headers: { 'x-admin-key': key } });
    if (!res.ok) setError('delete failed'); else fetchLists();
  }

  async function deleteCategory(slug) {
    if (!confirm('Delete category ' + slug + '?')) return;
    const key = sanitizeKey(adminKey);
    // categories DELETE endpoint expects adminKey as query param
    const url = '/api/categories/' + encodeURIComponent(slug) + (key ? ('?adminKey=' + encodeURIComponent(key)) : '');
    const res = await fetch(url, { method: 'DELETE' });
    if (!res.ok) {
      const text = await res.text();
      setError('delete failed: ' + text);
    } else fetchLists();
  }

  async function saveCategoryEdit(e) {
    e.preventDefault();
    if (!editingCategory) return;
    const key = sanitizeKey(adminKey);
    if (!key) { setError('Admin key required to edit categories'); return; }
    const form = e.target;
    const body = {
      name: form.name.value,
      slug: form.slug.value,
      description: form.description.value || '',
      icon: form.icon.value || ''
    };
    const target = editingCategory.originalSlug || editingCategory.slug;
    const res = await fetch('/api/categories/' + encodeURIComponent(target), { method: 'PUT', headers: { 'Content-Type': 'application/json', 'x-admin-key': key }, body: JSON.stringify(body) });
    const j = await res.json();
    if (!res.ok) setError(j.error || 'update failed'); else { setEditingCategory(null); fetchLists(); }
  }

  // Filter products based on search
  const filteredProducts = products.filter(p => 
    p.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    p.slug.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const filteredCategories = categories.filter(c => 
    c.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    c.slug.toLowerCase().includes(searchQuery.toLowerCase())
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900">
      {/* Toast notifications */}
      <AnimatePresence>
        {toast && (
          <Toast 
            message={toast.message} 
            type={toast.type} 
            onClose={() => setToast(null)} 
          />
        )}
      </AnimatePresence>

      {/* Header */}
      <motion.header 
        initial={{ y: -20, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        className="bg-black/20 backdrop-blur-xl border-b border-white/10 sticky top-0 z-40"
      >
        <div className="container mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div className="w-10 h-10 rounded-xl bg-gradient-to-br from-purple-500 to-pink-500 flex items-center justify-center">
                <span className="text-white font-bold text-lg">N</span>
              </div>
              <div>
                <h1 className="text-2xl font-bold text-white">Admin Dashboard</h1>
                <p className="text-slate-400">Welcome back, {session?.user?.name || 'Admin'}</p>
              </div>
            </div>
            <div className="flex items-center gap-3">
              <motion.button 
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={fetchLists} 
                disabled={loading}
                className="flex items-center gap-2 px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors disabled:opacity-50"
              >
                {loading ? <LoadingSpinner size="sm" /> : '🔄'}
                Refresh
              </motion.button>
              <motion.button 
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => signOut()} 
                className="flex items-center gap-2 px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors"
              >
                🚪 Sign Out
              </motion.button>
            </div>
          </div>
        </div>
      </motion.header>

      {/* Main content */}
      <div className="container mx-auto px-6 py-8">
        {/* Admin key input */}
        <motion.div 
          initial={{ y: 20, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          className="mb-8 p-6 bg-black/20 backdrop-blur-xl rounded-2xl border border-white/10"
        >
          <div className="flex items-center gap-4">
            <div className="flex-1">
              <label className="block text-sm font-medium text-slate-200 mb-2">
                Admin Key <span className="text-red-400">*</span>
              </label>
              <input
                type="password"
                value={adminKey}
                onChange={(e) => setAdminKey(e.target.value)}
                placeholder="Enter your admin key..."
                className="w-full px-4 py-3 bg-slate-800/50 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
              />
              <p className="text-xs text-slate-400 mt-1">Required for create, update, and delete operations</p>
            </div>
            <div className="text-right">
              <div className="text-sm text-slate-400">Status</div>
              <div className={`font-medium ${adminKey ? 'text-green-400' : 'text-red-400'}`}>
                {adminKey ? '🔓 Authenticated' : '🔒 No Key'}
              </div>
            </div>
          </div>
        </motion.div>

        {/* Navigation tabs */}
        <motion.div 
          initial={{ y: 20, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ delay: 0.1 }}
          className="mb-8"
        >
          <div className="flex items-center justify-between mb-6">
            <div className="flex gap-2">
              {['overview', 'products', 'categories'].map((tabName) => (
                <motion.button
                  key={tabName}
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={() => setTab(tabName)}
                  className={`px-6 py-3 rounded-xl font-medium capitalize transition-all ${
                    tab === tabName
                      ? 'bg-purple-600 text-white shadow-lg shadow-purple-500/25'
                      : 'bg-slate-800/50 text-slate-300 hover:bg-slate-700/50 hover:text-white'
                  }`}
                >
                  {tabName === 'overview' && '📊'} 
                  {tabName === 'products' && '📦'} 
                  {tabName === 'categories' && '📂'} 
                  {' ' + tabName}
                </motion.button>
              ))}
            </div>
            
            {/* Search */}
            {(tab === 'products' || tab === 'categories') && (
              <div className="flex items-center gap-2">
                <div className="relative">
                  <input
                    type="text"
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    placeholder="Search..."
                    className="w-64 px-4 py-2 pl-10 bg-slate-800/50 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-purple-500"
                  />
                  <div className="absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400">
                    🔍
                  </div>
                </div>
              </div>
            )}
          </div>
        </motion.div>

        {/* Tab content */}
        <motion.div
          key={tab}
          initial={{ y: 20, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ duration: 0.3 }}
        >
          {tab === 'overview' && (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              {/* Stats cards */}
              <motion.div 
                whileHover={{ scale: 1.02 }}
                className="p-6 bg-gradient-to-br from-blue-500/10 to-blue-600/10 border border-blue-500/20 rounded-2xl"
              >
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-blue-400 text-sm font-medium">Products</p>
                    <p className="text-3xl font-bold text-white">{initialCounts.products || products.length}</p>
                  </div>
                  <div className="text-3xl">📦</div>
                </div>
              </motion.div>

              <motion.div 
                whileHover={{ scale: 1.02 }}
                className="p-6 bg-gradient-to-br from-emerald-500/10 to-emerald-600/10 border border-emerald-500/20 rounded-2xl"
              >
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-emerald-400 text-sm font-medium">Categories</p>
                    <p className="text-3xl font-bold text-white">{initialCounts.categories || categories.length}</p>
                  </div>
                  <div className="text-3xl">📂</div>
                </div>
              </motion.div>

              <motion.div 
                whileHover={{ scale: 1.02 }}
                className="p-6 bg-gradient-to-br from-purple-500/10 to-purple-600/10 border border-purple-500/20 rounded-2xl"
              >
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-purple-400 text-sm font-medium">Admin Status</p>
                    <p className="text-lg font-bold text-white">{adminKey ? 'Active' : 'Inactive'}</p>
                  </div>
                  <div className="text-3xl">{adminKey ? '🟢' : '🔴'}</div>
                </div>
              </motion.div>

              <motion.div 
                whileHover={{ scale: 1.02 }}
                className="p-6 bg-gradient-to-br from-amber-500/10 to-amber-600/10 border border-amber-500/20 rounded-2xl"
              >
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-amber-400 text-sm font-medium">Session</p>
                    <p className="text-lg font-bold text-white truncate">{session?.user?.name || 'Admin'}</p>
                  </div>
                  <div className="text-3xl">👤</div>
                </div>
              </motion.div>
            </div>
          )}

          {tab === 'products' && (
            <div>
              <h2 className="text-lg font-semibold mb-2">Products</h2>
              <div className="space-y-3">
                {products.map(p => (
                  <div key={p._id} className="p-3 bg-slate-800 rounded flex items-center justify-between">
                    <div>
                      <div className="font-medium">{p.name}</div>
                      <div className="text-sm text-slate-400">{p.slug}</div>
                    </div>
                    <div className="space-x-2">
                      <a className="text-cyan-300" href={`/products/${p.slug}`} target="_blank" rel="noreferrer">View</a>
                      <button onClick={() => { setEditing(p); window.scrollTo({ top: 0, behavior: 'smooth' }); }} className="px-2 py-1 bg-yellow-600 rounded text-white">Edit</button>
                      <button onClick={() => deleteProduct(p.slug)} className="px-2 py-1 bg-red-600 rounded text-white">Delete</button>
                    </div>
                  </div>
                ))}
              </div>

              <form onSubmit={createProduct} className="mt-4 space-y-2">
                <h3 className="font-semibold">Create Product</h3>
                <input name="name" placeholder="Name" className="w-full p-2 bg-slate-700 rounded" required />
                <input name="slug" placeholder="slug" className="w-full p-2 bg-slate-700 rounded" required />
                <input name="image" placeholder="image (url or /path)" className="w-full p-2 bg-slate-700 rounded" />
                <input name="images" placeholder="images (comma separated)" className="w-full p-2 bg-slate-700 rounded" />
                <input name="category" placeholder="category slug" className="w-full p-2 bg-slate-700 rounded" />
                {/* manufacturer inputs removed */}
                <textarea name="description" placeholder="description" className="w-full p-2 bg-slate-700 rounded" />
                
                <div>
                  <label className="block text-sm text-slate-300 mb-1">Affiliate Links</label>
                  <div className="space-y-2">
                    {newAffiliateLinks.map((l, idx) => (
                      <div key={idx} className="flex gap-2">
                        <input value={l.storeName || ''} onChange={e => { const copy = [...newAffiliateLinks]; copy[idx] = { ...copy[idx], storeName: e.target.value }; setNewAffiliateLinks(copy); }} placeholder="storeName" className="flex-1 p-2 bg-slate-700 rounded" />
                        <input value={l.url || ''} onChange={e => { const copy = [...newAffiliateLinks]; copy[idx] = { ...copy[idx], url: e.target.value }; setNewAffiliateLinks(copy); }} placeholder="url" className="flex-1 p-2 bg-slate-700 rounded" />
                        <input value={l.price || ''} onChange={e => { const copy = [...newAffiliateLinks]; copy[idx] = { ...copy[idx], price: e.target.value }; setNewAffiliateLinks(copy); }} placeholder="price" className="w-36 p-2 bg-slate-700 rounded" />
                        <button type="button" onClick={() => { const copy = newAffiliateLinks.filter((_,i)=>i!==idx); setNewAffiliateLinks(copy); }} className="px-2 bg-red-600 rounded">Remove</button>
                      </div>
                    ))}
                    <div>
                      <button type="button" onClick={() => setNewAffiliateLinks([...newAffiliateLinks, { storeName: '', url: '', price: '' }])} className="px-3 py-1 bg-cyan-600 rounded">Add link</button>
                    </div>
                  </div>
                </div>

                <div>
                  <label className="block text-sm text-slate-300 mb-1">Benchmarks</label>
                  <div className="space-y-2">
                    {newBenchmarks.map((b, idx) => (
                      <div key={idx} className="p-2 bg-slate-800/50 rounded">
                        <input value={b.title || ''} onChange={e => { const copy = [...newBenchmarks]; copy[idx] = { ...copy[idx], title: e.target.value }; setNewBenchmarks(copy); }} placeholder="title" className="w-full p-2 bg-slate-700 rounded mb-2" />
                        <input value={b.image || b.imageUrl || ''} onChange={e => { const copy = [...newBenchmarks]; copy[idx] = { ...copy[idx], image: e.target.value }; setNewBenchmarks(copy); }} placeholder="image URL" className="w-full p-2 bg-slate-700 rounded mb-2" />
                        <textarea value={b.text || b.content || ''} onChange={e => { const copy = [...newBenchmarks]; copy[idx] = { ...copy[idx], text: e.target.value }; setNewBenchmarks(copy); }} placeholder="text/content" className="w-full p-2 bg-slate-700 rounded" />
                        <div className="mt-2"><button type="button" onClick={() => { const copy = newBenchmarks.filter((_,i)=>i!==idx); setNewBenchmarks(copy); }} className="px-2 bg-red-600 rounded">Remove</button></div>
                      </div>
                    ))}
                    <div>
                      <button type="button" onClick={() => setNewBenchmarks([...newBenchmarks, { title: '', text: '', image: '' }])} className="px-3 py-1 bg-amber-500 rounded">Add benchmark</button>
                    </div>
                  </div>
                </div>
                <div className="flex gap-2">
                  <button type="submit" className="px-3 py-2 bg-green-600 rounded">Create</button>
                  <button type="button" onClick={fetchLists} className="px-3 py-2 bg-slate-600 rounded">Refresh</button>
                </div>
              </form>

              {editing && (
                <div className="mt-6 p-4 bg-slate-800/60 rounded">
                  <h3 className="font-semibold">Edit Product: {editing.name}</h3>
                  <form onSubmit={async (e) => {
                    e.preventDefault();
                    const key = sanitizeKey(adminKey);
                    let body = {};
                    if (e.target.name) body.name = e.target.name.value;
                    if (e.target.slug) body.slug = e.target.slug.value;
                    if (e.target.images) body.images = e.target.images.value ? e.target.images.value.split(',').map(s=>s.trim()).filter(Boolean) : [];
                    if (e.target.description) body.description = e.target.description.value;
                    // manufacturer fields removed from edit
                    if (Array.isArray(editAffiliateLinks) && editAffiliateLinks.length) body.affiliateLinks = editAffiliateLinks;
                    if (Array.isArray(editBenchmarks) && editBenchmarks.length) body.benchmarks = editBenchmarks;
                    const res = await fetch('/api/products/' + encodeURIComponent(editing.slug), { method: 'PUT', headers: { 'Content-Type': 'application/json', 'x-admin-key': key }, body: JSON.stringify(body) });
                    const j = await res.json();
                    if (!res.ok) setError(j.error || 'update failed'); else { setEditing(null); fetchLists(); }
                  }}>
                    <input name="name" defaultValue={editing.name} className="w-full p-2 bg-slate-700 rounded" />
                    <input name="slug" defaultValue={editing.slug} className="w-full p-2 bg-slate-700 rounded" />
                    <input name="images" defaultValue={(editing.images || []).join(', ')} className="w-full p-2 bg-slate-700 rounded" />
                    {/* manufacturer inputs removed from edit form */}
                    <textarea name="description" defaultValue={editing.description || ''} className="w-full p-2 bg-slate-700 rounded" />

                    <div className="mt-3">
                      <label className="block text-sm text-slate-300 mb-1">Affiliate Links</label>
                      <div className="space-y-2">
                        {(editAffiliateLinks.length ? editAffiliateLinks : (editing.affiliateLinks || [])).map((l, idx) => (
                          <div key={idx} className="flex gap-2">
                            <input value={l.storeName || ''} onChange={e => { const base = editAffiliateLinks.length ? editAffiliateLinks : (editing.affiliateLinks || []); const copy = [...base]; copy[idx] = { ...copy[idx], storeName: e.target.value }; setEditAffiliateLinks(copy); }} placeholder="storeName" className="flex-1 p-2 bg-slate-700 rounded" />
                            <input value={l.url || ''} onChange={e => { const base = editAffiliateLinks.length ? editAffiliateLinks : (editing.affiliateLinks || []); const copy = [...base]; copy[idx] = { ...copy[idx], url: e.target.value }; setEditAffiliateLinks(copy); }} placeholder="url" className="flex-1 p-2 bg-slate-700 rounded" />
                            <input value={l.price || ''} onChange={e => { const base = editAffiliateLinks.length ? editAffiliateLinks : (editing.affiliateLinks || []); const copy = [...base]; copy[idx] = { ...copy[idx], price: e.target.value }; setEditAffiliateLinks(copy); }} placeholder="price" className="w-36 p-2 bg-slate-700 rounded" />
                            <button type="button" onClick={() => { const base = editAffiliateLinks.length ? editAffiliateLinks : (editing.affiliateLinks || []); const copy = base.filter((_,i)=>i!==idx); setEditAffiliateLinks(copy); }} className="px-2 bg-red-600 rounded">Remove</button>
                          </div>
                        ))}
                        <div>
                          <button type="button" onClick={() => setEditAffiliateLinks([...(editAffiliateLinks.length ? editAffiliateLinks : (editing.affiliateLinks || [])), { storeName: '', url: '', price: '' }])} className="px-3 py-1 bg-cyan-600 rounded">Add link</button>
                        </div>
                      </div>
                    </div>

                    <div className="mt-3">
                      <label className="block text-sm text-slate-300 mb-1">Benchmarks</label>
                      <div className="space-y-2">
                        {(editBenchmarks.length ? editBenchmarks : (editing.benchmarks || [])).map((b, idx) => (
                          <div key={idx} className="p-2 bg-slate-800/50 rounded">
                            <input value={b.title || ''} onChange={e => { const base = editBenchmarks.length ? editBenchmarks : (editing.benchmarks || []); const copy = [...base]; copy[idx] = { ...copy[idx], title: e.target.value }; setEditBenchmarks(copy); }} placeholder="title" className="w-full p-2 bg-slate-700 rounded mb-2" />
                            <input value={b.image || b.imageUrl || ''} onChange={e => { const base = editBenchmarks.length ? editBenchmarks : (editing.benchmarks || []); const copy = [...base]; copy[idx] = { ...copy[idx], image: e.target.value }; setEditBenchmarks(copy); }} placeholder="image URL" className="w-full p-2 bg-slate-700 rounded mb-2" />
                            <textarea value={b.text || b.content || ''} onChange={e => { const base = editBenchmarks.length ? editBenchmarks : (editing.benchmarks || []); const copy = [...base]; copy[idx] = { ...copy[idx], text: e.target.value }; setEditBenchmarks(copy); }} placeholder="text/content" className="w-full p-2 bg-slate-700 rounded" />
                            <div className="mt-2"><button type="button" onClick={() => { const base = editBenchmarks.length ? editBenchmarks : (editing.benchmarks || []); const copy = base.filter((_,i)=>i!==idx); setEditBenchmarks(copy); }} className="px-2 bg-red-600 rounded">Remove</button></div>
                          </div>
                        ))}
                        <div>
                          <button type="button" onClick={() => setEditBenchmarks([...(editBenchmarks.length ? editBenchmarks : (editing.benchmarks || [])), { title: '', text: '', image: '' }])} className="px-3 py-1 bg-amber-500 rounded">Add benchmark</button>
                        </div>
                      </div>
                    </div>
                    <div className="flex gap-2 mt-2">
                      <button type="submit" className="px-3 py-2 bg-amber-600 rounded">Save</button>
                      <button type="button" onClick={() => setEditing(null)} className="px-3 py-2 bg-slate-600 rounded">Cancel</button>
                    </div>
                  </form>
                </div>
              )}
            </div>
          )}

          {tab === 'categories' && (
            <div>
              <h2 className="text-lg font-semibold mb-2">Categories</h2>
              <div className="space-y-3">
                {categories.map(c => (
                  <div key={c._id} className="p-3 bg-slate-800 rounded">
                    {editingCategory && editingCategory._id === c._id ? (
                      <form onSubmit={saveCategoryEdit} className="flex flex-col gap-2">
                        <input name="name" defaultValue={c.name} className="p-2 bg-slate-700 rounded" />
                        <input name="slug" defaultValue={c.slug} className="p-2 bg-slate-700 rounded" />
                        <input name="icon" defaultValue={c.icon || ''} className="p-2 bg-slate-700 rounded" />
                        <textarea name="description" defaultValue={c.description || ''} className="p-2 bg-slate-700 rounded" />
                        <div className="flex gap-2">
                          <button type="submit" className="px-3 py-1 bg-amber-600 rounded">Save</button>
                          <button type="button" onClick={() => setEditingCategory(null)} className="px-3 py-1 bg-slate-600 rounded">Cancel</button>
                        </div>
                      </form>
                    ) : (
                      <div className="flex items-center justify-between">
                        <div>
                          <div className="font-medium">{c.name}</div>
                          <div className="text-sm text-slate-400">{c.slug}</div>
                        </div>
                        <div className="space-x-2">
                          <a className="text-cyan-300" href={`/categories/${c.slug}`} target="_blank" rel="noreferrer">View</a>
                          <button onClick={() => setEditingCategory({ ...c, originalSlug: c.slug })} className="px-2 py-1 bg-yellow-600 rounded text-white">Edit</button>
                          <button onClick={() => deleteCategory(c.slug)} className="px-2 py-1 bg-red-600 rounded text-white">Delete</button>
                        </div>
                      </div>
                    )}
                  </div>
                ))}
              </div>

              <form onSubmit={createCategory} className="mt-4 space-y-2">
                <h3 className="font-semibold">Create Category</h3>
                <input name="name" placeholder="Name" className="w-full p-2 bg-slate-700 rounded" required />
                <input name="slug" placeholder="slug" className="w-full p-2 bg-slate-700 rounded" required />
                <input name="icon" placeholder="icon" className="w-full p-2 bg-slate-700 rounded" />
                <textarea name="description" placeholder="description" className="w-full p-2 bg-slate-700 rounded" />
                <div className="flex gap-2">
                  <button type="submit" className="px-3 py-2 bg-green-600 rounded">Create</button>
                  <button type="button" onClick={fetchLists} className="px-3 py-2 bg-slate-600 rounded">Refresh</button>
                </div>
              </form>
            </div>
          )}
        </div>

        <aside className="bg-slate-800/50 rounded p-4">
          <h3 className="font-semibold">Quick</h3>
          <div className="mt-3 space-y-2">
            <div>Products: <strong>{initialCounts.products || products.length}</strong></div>
            <div>Categories: <strong>{initialCounts.categories || categories.length}</strong></div>
            {/* Seed endpoint removed */}
            <div className="text-sm text-slate-400 mt-2">Keep your admin key in localStorage to authorize actions.</div>
          </div>
        </aside>
      </div>
    </div>
  );
}
